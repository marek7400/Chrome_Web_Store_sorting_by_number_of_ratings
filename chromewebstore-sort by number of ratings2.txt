// == Chrome Web Store - Resilient Sorter ==
// Version: 2.0
// Description: A script that clicks "Load More", collects all results, and sorts them by the number of ratings.
// It is resilient to page resets by the store - it saves its progress and can resume.

(function(window) {
    // =========================================================================
    // PART 0: CONFIGURATION
    // =========================================================================
    const CONFIG = {
        MAX_CLICKS: 49, // Maximum number of clicks before stopping
        POST_CLICK_LOAD_TIME: 1500, // Time (ms) to wait for new items to load after a click
        SCROLL_DELAY: 1500, // Time (ms) to wait after scrolling if the button is not visible
        IDLE_TIMEOUT: 5000, // Time (ms) of inactivity after which the script will stop and sort the results
        STORAGE_KEY: 'cws_sorter_state', // Key for saving data in localStorage
        PROCESSED_ATTRIBUTE: 'data-cws-processed', // Attribute marking a processed element

        // List of possible "Load More" button texts in different languages (lowercase)
        BUTTON_TEXTS: [
            "load more", "wczytaj więcej", "weitere laden", "cargar más", 
            "afficher plus", "carica altro", "ещё"
        ],

        // List of abbreviations for "thousand"
        THOUSAND_ABBREVIATIONS: ['k', 'tys.', 'тыс.', 'mil', 'tausend']
    };

    // =========================================================================
    // PART 1: MAIN APPLICATION LOGIC
    // =========================================================================
    const CWS_Sorter = {
        state: {
            collectedItems: [],
            clickCount: 0,
            isFinishing: false,
            idleTimerID: null
        },

        // --- Helper Functions ---

        log: (message, style = "color: skyblue;") => console.log(`%c[CWS Sorter] ${message}`, style),
        warn: (message) => console.warn(`[CWS Sorter] ${message}`),
        error: (message) => console.error(`[CWS Sorter] ${message}`),
        success: (message) => console.log(`%c[CWS Sorter] ${message}`, "color: lightgreen; font-weight: bold;"),

        // --- State Management (save/load from localStorage) ---

        saveState: function() {
            const stateToSave = {
                collectedItems: this.state.collectedItems,
                clickCount: this.state.clickCount
            };
            localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(stateToSave));
            this.log(`State saved. Collected ${this.state.collectedItems.length} items after ${this.state.clickCount} clicks.`);
        },

        loadState: function() {
            const savedState = localStorage.getItem(CONFIG.STORAGE_KEY);
            if (savedState) {
                try {
                    const parsedState = JSON.parse(savedState);
                    this.state.collectedItems = parsedState.collectedItems || [];
                    this.state.clickCount = parsedState.clickCount || 0;
                    this.success(`Session resumed. Loaded ${this.state.collectedItems.length} items.`);
                    return true;
                } catch (e) {
                    this.error("Failed to load saved state. Starting over.");
                    this.clearData();
                    return false;
                }
            }
            return false;
        },

        clearData: function() {
            localStorage.removeItem(CONFIG.STORAGE_KEY);
            console.log("%c[CWS Sorter] Saved state has been cleared.", "color: orange; font-weight: bold;");
        },

        // --- Processing and Sorting Logic ---

        parseNumberFromText: function(text) {
            if (!text) return 0;
            let cleanedText = text.replace(/[()]/g, '').trim().toLowerCase().replace(',', '.');
            let multiplier = 1;
            for (const abbr of CONFIG.THOUSAND_ABBREVIATIONS) {
                if (cleanedText.includes(abbr)) {
                    multiplier = 1000;
                    cleanedText = cleanedText.replace(abbr, '').trim();
                    break;
                }
            }
            const number = parseFloat(cleanedText);
            return isNaN(number) ? 0 : number * multiplier;
        },
        
        processNewItems: function() {
            this.log("Searching for new items to process...");
            const container = document.querySelector(".QAB7uc");
            if (!container) {
                this.warn("Could not find the .QAB7uc container. Waiting...");
                return;
            }

            const itemsOnPage = container.querySelectorAll(`.QAB7uc > *:not([${CONFIG.PROCESSED_ATTRIBUTE}])`);
            if (itemsOnPage.length === 0) {
                 this.log("No new items found on the page.");
                 return;
            }

            this.success(`Found ${itemsOnPage.length} new items.`);
            
            itemsOnPage.forEach(itemElement => {
                const numberEl = itemElement.querySelector('span.Y30PE');
                if (numberEl) {
                    const value = this.parseNumberFromText(numberEl.textContent);
                    this.state.collectedItems.push({
                        html: itemElement.outerHTML,
                        value: value
                    });
                }
                itemElement.setAttribute(CONFIG.PROCESSED_ATTRIBUTE, 'true');
            });
            
            this.saveState();
        },

        // --- Finishing and Saving the File ---

        generateAndSaveFinalPage: function() {
            this.log("Starting sort and generating the final file...", "color: cyan; font-weight: bold;");

            if (this.state.collectedItems.length === 0) {
                this.warn("No items were collected to sort.");
                return;
            }

            this.state.collectedItems.sort((a, b) => b.value - a.value);

            const sortedHTML = this.state.collectedItems.map(item => item.html).join('');
            
            const finalPageHTML = `
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Sorted Chrome Web Store Results</title>
                    <base href="${window.location.origin}">
                    <meta http-equiv="Content-Security-Policy" content="script-src 'none';">
                    <style>
                        body { font-family: sans-serif; margin: 0; background-color: #f5f5f5; }
                        .container { max-width: 1200px; margin: 20px auto; padding: 20px; }
                        /* Styles copied from the original page to preserve the look */
                        .QAB7uc { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 24px; }
                        /* Add more styles here if needed for proper item appearance */
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>Sorted Results (${this.state.collectedItems.length} items)</h1>
                        <div class="QAB7uc">${sortedHTML}</div>
                    </div>
                </body>
                </html>`;

            const blob = new Blob([finalPageHTML], { type: 'text/html' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `google-sorted-results-${new Date().toISOString().slice(0, 10)}.html`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);

            this.success("--- TASK COMPLETE. The file has been downloaded. ---");
            alert(`Download initiated!\n\nSorted and saved ${this.state.collectedItems.length} items. Check your browser's Downloads folder.`);
            
            this.clearData();
        },

        // --- Main Control Loop ---

        shutdown: function(reason) {
            if (this.state.isFinishing) return;
            this.state.isFinishing = true;
            clearTimeout(this.state.idleTimerID);
            this.log(`--- Stopped clicking (${reason}). ---`, "color: orange; font-weight: bold;");

            // Final processing pass, in case new items loaded just before stopping
            this.processNewItems();
            
            const waitBeforeSortTime = 2000;
            this.log(`Waiting ${waitBeforeSortTime / 1000}s before final sort...`);
            setTimeout(() => this.generateAndSaveFinalPage(), waitBeforeSortTime);
        },

        findLoadMoreButton: function() {
            const allPotentialButtons = document.querySelectorAll('button, [role="button"]');
            for (const el of allPotentialButtons) {
                const elementText = el.innerText?.trim().toLowerCase();
                if (elementText && CONFIG.BUTTON_TEXTS.includes(elementText)) {
                    return el;
                }
            }
            return null;
        },

        performNextStep: function() {
            if (this.state.isFinishing) return;

            // Reset the idle timer
            clearTimeout(this.state.idleTimerID);
            this.state.idleTimerID = setTimeout(() => this.shutdown("Idle timeout reached"), CONFIG.IDLE_TIMEOUT);

            // Step 1: Process new items that have appeared on the page
            this.processNewItems();

            // Step 2: Check the stop condition
            if (this.state.clickCount >= CONFIG.MAX_CLICKS) {
                this.shutdown(`Reached the limit of ${CONFIG.MAX_CLICKS} clicks`);
                return;
            }

            // Step 3: Find and click the "Load More" button
            const loadMoreButton = this.findLoadMoreButton();

            if (loadMoreButton && !loadMoreButton.disabled) {
                this.success(`Found "Load More" button (Text: "${loadMoreButton.innerText.trim()}"). Clicking...`);
                loadMoreButton.click();
                this.state.clickCount++;
                this.log(`Click count: ${this.state.clickCount}/${CONFIG.MAX_CLICKS}`);
                this.saveState(); // Save state after incrementing the counter
                
                setTimeout(() => this.performNextStep(), CONFIG.POST_CLICK_LOAD_TIME);
            } else {
                // If the button doesn't exist, it's likely the end of the results
                // If it exists but is not visible, scroll the page
                const allItemsContainer = document.querySelector(".QAB7uc");
                if (allItemsContainer && (window.innerHeight + window.scrollY) < document.body.scrollHeight) {
                    this.log("Button not visible. Scrolling down...");
                    window.scrollBy(0, window.innerHeight * 0.9);
                    setTimeout(() => this.performNextStep(), CONFIG.SCROLL_DELAY);
                } else {
                    this.shutdown("Could not find the 'Load More' button, likely the end of results");
                }
            }
        },

        // --- Initialization ---
        
        start: function() {
            console.clear();
            this.log("--- RESILIENT SORTER SCRIPT STARTED ---", "color: yellow; font-size: 1.2em; font-weight: bold;");
            this.log("The script saves progress after each click. If the page refreshes, run the script again to continue.");
            this.log("To start from scratch, type 'CWS_Sorter.clearData()' in the console and press Enter, then run the script again.");

            this.loadState();
            this.performNextStep();
        }
    };

    // Start the script and expose it on the window object
    window.CWS_Sorter = CWS_Sorter;
    CWS_Sorter.start();

})(window);